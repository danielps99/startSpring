services:
  start-spring-api:
    build:
      context: ./
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: start-spring-api
    image: bdws/start-spring-api:1.0
    ports:
      - "8080:8080"
      - "5005:5005"
    volumes:
      - promtail_log:/deployjava/logs
    depends_on:
      start-spring-db:
        condition: service_healthy
    environment:
      - ADDITIONAL_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xmx256m -Xms128m -XX:MaxMetaspaceSize=128m
      - PROFILE=devdocker

  start-spring-db:
    container_name: start-spring-db
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_DATABASE=startSpringDb
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=developer
      - MYSQL_PASSWORD=freeaccess
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      start_period: 2s
      interval: 5s
      timeout: 5s
      retries: 5
#      links:
#        - node-exporter:node-exporter


#  node-exporter:
#    image: prom/node-exporter:latest
#    network_mode: host
#    container_name: monitoring_node_exporter
#    restart: unless-stopped
#    expose:
#      - 9100
  #observability/grafana/provisioning/datasources/datasources.yaml


  prometheus:
    image: prom/prometheus:v2.35.0
#    network_mode: host
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"

  grafana:
    image: grafana/grafana-oss:11.1.5
    pull_policy: always
#    network_mode: host
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    user: root
    volumes:
      - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    #    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#      - GF_USERS_ALLOW_SIGN_UP=false
#      - GF_SERVER_DOMAIN=localhost
#      # Enabled for logging
#      - GF_LOG_MODE=console file
#      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug

    environment:
      - GF_DEFAULT_APP_MODE=development
      - GF_LOG_LEVEL=debug
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin # grants admin role to anonymous access
      - GF_AUTH_ANONYMOUS_ENABLED=true # removes login 1/2
      - GF_AUTH_BASIC_ENABLED=false # removes login 2/2
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting
#      # Enabled for logging
#      - GF_LOG_MODE=console file
#      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki:/etc/loki
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.0.0
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - ./observability/promtail:/etc/promtail
      - promtail_log:/var/log
    depends_on:
      - loki

volumes:
  app_data: { }
  promtail_log:
    name: promtail_log

  dbdata:
    driver: local